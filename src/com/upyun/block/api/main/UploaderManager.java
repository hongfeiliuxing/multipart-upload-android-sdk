/** * com.upyun.api * Upload.java */package com.upyun.block.api.main;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.RandomAccessFile;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.TreeSet;import org.json.JSONArray;import org.json.JSONObject;import com.belladati.httpclientandroidlib.Header;import com.belladati.httpclientandroidlib.HttpEntity;import com.belladati.httpclientandroidlib.HttpResponse;import com.belladati.httpclientandroidlib.NameValuePair;import com.belladati.httpclientandroidlib.StatusLine;import com.belladati.httpclientandroidlib.client.HttpClient;import com.belladati.httpclientandroidlib.client.entity.UrlEncodedFormEntity;import com.belladati.httpclientandroidlib.client.methods.HttpPost;import com.belladati.httpclientandroidlib.entity.ContentType;import com.belladati.httpclientandroidlib.entity.mime.HttpMultipartMode;import com.belladati.httpclientandroidlib.entity.mime.MultipartEntityBuilder;import com.belladati.httpclientandroidlib.entity.mime.content.ByteArrayBody;import com.belladati.httpclientandroidlib.impl.client.HttpClientBuilder;import com.belladati.httpclientandroidlib.message.BasicNameValuePair;import com.belladati.httpclientandroidlib.util.EntityUtils;import com.upyun.block.api.common.Params;import com.upyun.block.api.exception.UpYunException;import com.upyun.block.api.listener.ProgressListener;import com.upyun.block.api.utils.UpYunUtils;/** * 表单分块上传SDK *  * @author wangxiaolong *  */public class UploaderManager {		public static final int MIN_BLOCK_SIZE = 100 * 1024;// 1M	private final String boundary = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";		private static UploaderManager instance = null;	private String host = "http://m0.api.upyun.com/";	private String bucket;	public static int blockSize = 100 * 1024;	private long expiration = Calendar.getInstance().getTimeInMillis() + 60; // 60s		private String saveToken;	private String tokenSecret;	private File localFile;	private ProgressListener progressListener = null;	private int totalBlockNum;		public UploaderManager (String bucket){		this.bucket = bucket;	}		public static UploaderManager getInstance(String bucket){		if (instance == null || !bucket.equals(instance.getBucket())) {			return new UploaderManager(bucket);		}		return instance;	}			// get & set	private String getBucket() {		return this.bucket;	}	public String getHost() {		return host;	}	public void setHost(String host) {		this.host = host;	}	public static int getBlockSize() {		return blockSize;	}	public static void setBlockSize(int blockSize) {		UploaderManager.blockSize = blockSize;	}	public long getExpiration() {		return expiration;	}	public void setExpiration(long expiration) {		this.expiration = expiration;	}		/**	 * 获取文件元信息 计算policy、signature需要此信息	 * 	 * @param localFile	 * @param savePath	 * @return	 * @throws UpYunException	 * @throws FileNotFoundException	 */	public Map<String, Object> fetchFileInfoDictionaryWith(File localFile, String savePath) throws UpYunException, FileNotFoundException {		HashMap<String, Object> paramsMap = new HashMap<String, Object>();		paramsMap.put(Params.PATH, savePath);		paramsMap.put(Params.EXPIRATION, expiration);		paramsMap.put(Params.BLOCK_NUM, UpYunUtils.getBlockNum(localFile, blockSize));		paramsMap.put(Params.FILE_SIZE, localFile.length());		paramsMap.put(Params.FILE_MD5, UpYunUtils.md5Hex(new FileInputStream(localFile)));				return paramsMap;	}	/**	 * 获取请求url	 * 	 * @param bucket	 * @return	 */	private String getUrl(String bucket) {		return this.host + bucket + "/";	}	public JSONObject upload(String policy, String signature, File localFile, ProgressListener progressListener) throws UpYunException {				this.localFile = localFile;		this.progressListener = progressListener;		this.totalBlockNum = UpYunUtils.getBlockNum(localFile, blockSize);				try {			// 初始化上传			JSONObject initialResult = initialUpload(policy, signature);			if (initialResult.has(Params.ERROR_CODE)) {				/*				 * 出错时返回：				 * {"X-Request-Id":"11d88831c76213d9082457e55b8ff478","message"				 * :"Bucket NotFound.","error_code":40401,"code":404}				 * "X-Request-Id"说明：出现错误时，将该字段值提供给又拍云，可以用来排查错误				 */				return initialResult;			}						saveToken = initialResult.optString(Params.SAVE_TOKEN);			tokenSecret = initialResult.optString(Params.TOKEN_SECRET);			JSONArray array = initialResult.getJSONArray(Params.STATUS);			// 获取未上传的块下标			TreeSet<Integer> blockIndex = new TreeSet<Integer>();			for (int i = 0; i < array.length(); i++) {				if (array.getInt(i) == 0) {					blockIndex.add(i);				}			}						if (blockIndex.size() == 0) {				return initialResult;			}			//上传分块			JSONObject uploadResult = uploadBlocks(blockIndex);			if (uploadResult.getInt(Params.CODE) < 400) {				// 合并分块请求				HashMap<String, Object> paramsMapFinish = new HashMap<String, Object>();				paramsMapFinish.put(Params.EXPIRATION, expiration);				paramsMapFinish.put(Params.SAVE_TOKEN, saveToken);				String policyForFinish = UpYunUtils.getPolicy(paramsMapFinish);				String signatureForMerge = UpYunUtils.getSignature(paramsMapFinish, tokenSecret);				JSONObject result = uploadFinish(policyForFinish, signatureForMerge);				return result;			} else {				return uploadResult;			}		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	/**	 * 初始化上传	 * 	 * @param policy	 *            文件操作列表（save_token,expiration必须，其他可选参数参见http://docs.upyun.com/	 *            api/form_api/#Policy内容详解）	 * @param signature	 * @param bucket	 * @return	 * @throws UpYunException	 */	private JSONObject initialUpload(String policy, String signature)			throws UpYunException {		// build entity & send request		List<NameValuePair> pairList = new ArrayList<NameValuePair>();		NameValuePair param1 = new BasicNameValuePair(Params.POLICY, policy);		NameValuePair param2 = new BasicNameValuePair(Params.SIGNATURE, signature);		pairList.add(param1);		pairList.add(param2);		try {			HttpEntity entity = new UrlEncodedFormEntity(pairList);			return doRequest(entity, getUrl(bucket));		} catch (UnsupportedEncodingException e) {			throw new UpYunException(e.getMessage());		}	}	/**	 * 上传分块	 * 	 * @param blockUnsendIndex 列表中记录未上传的index	 * @return	 * @throws UpYunException	 */	private JSONObject uploadBlocks(TreeSet<Integer> blockUnsendIndex) throws UpYunException {		JSONObject result = null;		RandomAccessFile randomAccessFile = null;		try {						byte blockTmp[] = new byte[blockSize];			try {				randomAccessFile = new RandomAccessFile(localFile, "r");			} catch (FileNotFoundException e) {				throw new UpYunException(e.getMessage());			}			HashMap<String, Object> policyMap = new HashMap<String, Object>();			policyMap.put(Params.SAVE_TOKEN, saveToken);			policyMap.put(Params.EXPIRATION, expiration);			int readedBlocks = 0;			int readedSize = 0;			int sendedBlockCount = totalBlockNum - blockUnsendIndex.size();			for (Integer index : blockUnsendIndex) {				for (int i = 0; i < (index - readedBlocks); i++) {					randomAccessFile.read(blockTmp, 0, blockSize); 				}				readedSize = randomAccessFile.read(blockTmp, 0, blockSize);				if (readedSize == -1) {					throw new IndexOutOfBoundsException("文件读取越界");				}				readedBlocks = index + 1;				policyMap.put(Params.BLOCK_INDEX, index);				JSONObject resultTmp = null;				if (index == (totalBlockNum - 1)) { // 最后一个block不一定是满的，特殊处理一下					byte[] lastBlock = new byte[readedSize];					System.arraycopy(blockTmp, 0, lastBlock, 0, readedSize);					policyMap.put(Params.BLOCK_MD5, UpYunUtils.md5Hex(lastBlock));					resultTmp = uploadBlockProxy(policyMap, lastBlock,							sendedBlockCount * blockSize, localFile.length());				} else {					policyMap.put(Params.BLOCK_MD5, UpYunUtils.md5Hex(blockTmp));					resultTmp = uploadBlockProxy(policyMap, blockTmp,							sendedBlockCount * blockSize, localFile.length());				}				int code = resultTmp.getInt(Params.CODE);				if (code < 400) {					sendedBlockCount++;					result = resultTmp;				} else {					return resultTmp;				}			}		} catch (Exception e) {			throw new UpYunException(e.getMessage());		} finally {			if (randomAccessFile != null) {				try {					randomAccessFile.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}		return result;	}		private JSONObject uploadBlockProxy(HashMap<String, Object> map, byte[] block, long bytesSended, long totalBytes)			throws UpYunException {		String policy = UpYunUtils.getPolicy(map);		String signature = UpYunUtils.getSignature(map, this.tokenSecret);		MultipartEntityBuilder entityBuilder = MultipartEntityBuilder.create();		entityBuilder.setBoundary(boundary);		entityBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);		entityBuilder.addPart("file", new ByteArrayBody(block,				ContentType.APPLICATION_OCTET_STREAM, "block"));		entityBuilder.addTextBody("policy", policy);		entityBuilder.addTextBody("signature", signature);		HttpEntity entity = entityBuilder.build();		if (progressListener != null) {			CountingHttpEntity ce = new CountingHttpEntity(entity, progressListener, bytesSended, totalBytes);			return doRequest(ce, getUrl(bucket));		}		return doRequest(entity, getUrl(bucket));	}	/**	 * 合并分块请求（分块全部上传成功后请求服务端合并分块）	 * 	 * @param policy	 *            文件操作列表（save_token,expiration必须，其他可选参数参见http://docs.upyun.com/	 *            api/form_api/#Policy内容详解）	 * @param signature	 * @param bucket	 * @param returnUrl	 *            客户端同步回调URL	 * @param notifyUrl	 *            异步通知URL	 * @return	 * @throws UpYunException	 */	private JSONObject uploadFinish(String policy, String signature)			throws UpYunException {		// build entity & send request		List<NameValuePair> paramList = new ArrayList<NameValuePair>();		NameValuePair param1 = new BasicNameValuePair(Params.POLICY, policy);		NameValuePair param2 = new BasicNameValuePair(Params.SIGNATURE, signature);		paramList.add(param1);		paramList.add(param2);		try {			HttpEntity entity = new UrlEncodedFormEntity(paramList);			return doRequest(entity, getUrl(bucket));		} catch (UnsupportedEncodingException e) {			throw new UpYunException(e.getMessage());		}	}	/**	 * 发送请求	 * 	 * @param entity	 * @param url	 * @return	 * @throws UpYunException	 */	private JSONObject doRequest(HttpEntity entity, String url) throws UpYunException {		JSONObject jsonObj = null;		try {			HttpClient httpclient = HttpClientBuilder.create().build();			HttpPost httpPost = new HttpPost(url);			httpPost.setEntity(entity);			HttpResponse response = httpclient.execute(httpPost);			StatusLine statusLine = response.getStatusLine();			String responseJson = EntityUtils.toString(response.getEntity());			jsonObj = new JSONObject(responseJson);			jsonObj.put("code", statusLine.getStatusCode());			if (jsonObj.has("error_code")) {				Header[] headers = response.getHeaders("X-Request-Id");				if (headers != null && headers.length == 1)					jsonObj.put("X-Request-Id", headers[0].getValue());			}		} catch (Exception e) {			throw new UpYunException(e.getMessage());		}		return jsonObj;	}}